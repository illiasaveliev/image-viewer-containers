AWSTemplateFormatVersion: 2010-09-09
Description: Image Viewer API CloudFormation template for Fargate.
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  SubnetA:
    Type: AWS::EC2::Subnet::Id
  SubnetB:
    Type: AWS::EC2::Subnet::Id
  Image:
    Type: String
  ServiceName:
    Type: String
    Default: image-viewer-api
  ContainerPort:
    Type: Number
    Default: 80
  # for autoscaling
  MinContainers:
    Type: Number
    Default: 1
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 10
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 50
  S3Bucket:
    Type: String
  AwsLogGroup:
    Type: String
    Default: image-viewer-api
  CpuSize:
    Default: 256
    Type: String
  MemorySize:
    Default: 512
    Type: String
  VpcLinkName:
    Type: String
    Default: image-viewer-vpc-link
  QueueName:
    Default: image-labeling-queue
    Type: String
  WebappRedirectUrl:
    Default: http://localhost/
    Type: String
  Ulimit:
    Default: 65000
    Type: Number
Resources:
  S3:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: BucketOwnerRead
      BucketName: !Ref S3Bucket
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
           Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CpuSize
      Memory: !Ref MemorySize
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Ulimits:
            - 
              Name: "nofile"
              HardLimit: !Ref Ulimit
              SoftLimit: !Ref Ulimit
          Environment:
          - Name: "AppS3Bucket"
            Value: !Ref S3Bucket
          - Name: "AppSQSUrl"
            Value: !Ref Queue
          - Name: "WebappRedirectUrl"
            Value: !Ref WebappRedirectUrl
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
      Policies:
        - 
          PolicyName: !Join ['', [!Ref ServiceName, 'S3-Policy']]
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - 's3:*'
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref S3Bucket, '*']]
        - 
          PolicyName: !Join ['', [!Ref ServiceName, 'SQS-Policy']]
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - 'sqs:*'
                Resource:
                  - !GetAtt Queue.Arn
  FargateLoadBalancer:
            Type: AWS::ElasticLoadBalancingV2::LoadBalancer
            Properties:
                Type: network
                Name: !Ref ServiceName
                Subnets:
                   - !Ref SubnetA
                   - !Ref SubnetB
  FargateLoadBalancerListener:
            Type: AWS::ElasticLoadBalancingV2::Listener
            Properties: 
              DefaultActions: 
                - Type: forward 
                  TargetGroupArn: !Ref TargetGroup
              LoadBalancerArn: !Ref FargateLoadBalancer
              Port: 80
              Protocol: TCP
  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - FargateLoadBalancerListener
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ServiceSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      #HealthCheckPath:
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, '-', TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !Ref VPC
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AwsLogGroup
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref AutoScalingTargetValue
  FargateVpcLink:
        Type: AWS::ApiGateway::VpcLink
        Properties:
            Description: 'Extract API'
            Name: !Ref VpcLinkName
            TargetArns:
               - !Ref FargateLoadBalancer
  ServerlessRestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: 'RestApi deployment'
  ServerlessRestApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeployment
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod
  ServerlessRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        x-amazon-apigateway-api-key-source : "HEADER"
        paths:
          '/{proxy+}':
            x-amazon-apigateway-any-method:
              parameters:
              - name: "proxy"
                in: "path"
                required: true
                type: "string"
              x-amazon-apigateway-integration:
                httpMethod: ANY
                type: http_proxy
                connectionType: 'VPC_LINK'
                connectionId: !Ref FargateVpcLink
                uri: !Join ['', ['http://', !GetAtt FargateLoadBalancer.DNSName, '/{proxy}']]
                passthroughBehavior: 'WHEN_NO_MATCH'
                requestParameters: {
                  'integration.request.path.proxy': 'method.request.path.proxy'
                  }
              responses: {}
        swagger: '2.0'
  DlQueue:
        Type: AWS::SQS::Queue
        Properties:
          DelaySeconds: 0
          MaximumMessageSize: 262144
          MessageRetentionPeriod: 1209600
          QueueName: !Sub "${QueueName}-dl"
          ReceiveMessageWaitTimeSeconds: 0
          VisibilityTimeout: 60
  Queue:
      Type: AWS::SQS::Queue
      DependsOn: DlQueue
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144
        MessageRetentionPeriod: 1209600
        QueueName: !Ref QueueName
        ReceiveMessageWaitTimeSeconds: 0
        VisibilityTimeout: 30
        RedrivePolicy: 
          deadLetterTargetArn: 
            Fn::GetAtt: 
              - DlQueue
              - Arn
          maxReceiveCount: 3
Outputs:
  Endpoint:
    Description: Endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"